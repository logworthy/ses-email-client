AWSTemplateFormatVersion: 2010-09-09
Description: ACFS3 - S3 Static site with CF and ACM (uksb-1qnk6ni7b) (version:v0.5)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Domain
      Parameters:
      - SubDomain
      - DomainName
Mappings:
  Solution:
    Constants:
      Version: v0.5

Parameters:
  IndexHtmlSrcUrl:
    Default: >-
      https://raw.githubusercontent.com/logworthy/ses-email-client/master/my-email/index.html
    Type: String
    Description: Link to HTML to pull

  StaticS3Key:
    Default: index.html
    Type: String
    Description: Key to store file

  SubDomain:
    Description: The part of a website address before your DomainName - e.g. www or
      img
    Type: String
    Default: mail
    AllowedPattern: ^[^.]*$

  DomainName:
    Description: The part of a website address after your SubDomain - e.g. example.com
    Type: String
    Default: freezochino.com.au

  CreateApex:
    Description: Create an Apex Alias in CloudFront distribution - yes/no
    Type: String
    Default: 'no'
    AllowedValues:
    - 'yes'
    - 'no'

Resources:
  CustomResourceStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/solution-builders-us-east-1/amazon-cloudfront-secure-static-site/v0.5/af2c1d250e85e4f25a82dd894d7c10e1.template
      Tags:
      - Key: Solution
        Value: ACFS3
  AcmCertificateStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/solution-builders-us-east-1/amazon-cloudfront-secure-static-site/v0.5/54343629157101ef22bab8b3da218407.template
      Parameters:
        SubDomain:
          Ref: SubDomain
        DomainName:
          Ref: DomainName
        CFNCustomProvider:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.CFNCustomProvider
        CopyFunction:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.CopyFunction
        CreateApex:
          Ref: CreateApex
      Tags:
      - Key: Solution
        Value: ACFS3
  CloudFrontStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/solution-builders-us-east-1/amazon-cloudfront-secure-static-site/v0.5/281bdd7adb70788986849cf7f3676dcb.template
      Parameters:
        CertificateArn:
          Fn::GetAtt:
          - AcmCertificateStack
          - Outputs.CertificateArn
        DomainName:
          Ref: DomainName
        SubDomain:
          Ref: SubDomain
        CreateApex:
          Ref: CreateApex
        S3BucketRoot:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.S3BucketRoot
        S3BucketRootName:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.S3BucketRootName
        S3BucketRootArn:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.S3BucketRootArn
        S3BucketLogs:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.S3BucketLogs
        S3BucketLogsName:
          Fn::GetAtt:
          - CustomResourceStack
          - Outputs.S3BucketLogsName
      Tags:
      - Key: Solution
        Value: ACFS3

  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt AWSLambdaFunction.Arn
      source_url: !Ref IndexHtmlSrcUrl
      dest_bucket:
        Fn::GetAtt:
          - CustomResourceStack
          - Outputs.S3BucketRoot
      dest_key: !Ref StaticS3Key

  AWSLambdaFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       Description: "Copy file to S3 bucket"
       FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-lambda'
       Handler: index.handler
       Role: !GetAtt AWSLambdaExecutionRole.Arn
       Timeout: 360
       Runtime: python3.6
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          from urllib.request import urlopen
          def handler(event, context):
              # Init ...
              the_event = event['RequestType']
              print("The event is: ", str(the_event))
              response_data = {}
              s_3 = boto3.client('s3')
              # Retrieve parameters
              source_url = event['ResourceProperties']['source_url']
              dest_bucket = event['ResourceProperties']['dest_bucket']
              dest_key = event['ResourceProperties']['dest_key']
              try:
                  if the_event in ('Create', 'Update'):
                      print("Requested file: %s to s3://%s/%s" % (str(source_url), str(dest_bucket), str(dest_key)))
                      response = urlopen(source_url)
                      s3_response = s_3.upload_fileobj(response, dest_bucket, dest_key)
                  elif the_event == 'Delete':
                      print("Deleting S3 content...")
                      s3_response = s_3.delete_object(
                          Bucket=dest_bucket,
                          Key=dest_key
                      )

                  # Everything OK... send the signal back
                  print("Operation successful!")
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.SUCCESS,
                                   response_data)
              except Exception as e:
                  print("Operation failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.FAILED,
                                   response_data)
  AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:List*
             Effect: Allow
             Resource:
               - !Sub
                 - 'arn:aws:s3:::${S3Bucket}/*'
                 - S3Bucket: !GetAtt
                   - CustomResourceStack
                   - Outputs.S3BucketRoot
               - !Sub
                 - 'arn:aws:s3:::${S3Bucket}'
                 - S3Bucket: !GetAtt
                   - CustomResourceStack
                   - Outputs.S3BucketRoot
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
       RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole

Outputs:
  SolutionVersion:
    Value:
      Fn::FindInMap:
      - Solution
      - Constants
      - Version
  CFNCustomProvider:
    Description: ACM helper function
    Value:
      Fn::GetAtt:
      - CustomResourceStack
      - Outputs.CFNCustomProvider
  CopyFunction:
    Description: S3 helper function
    Value:
      Fn::GetAtt:
      - CustomResourceStack
      - Outputs.CopyFunction
  S3BucketLogs:
    Description: Logging bucket
    Value:
      Fn::GetAtt:
      - CustomResourceStack
      - Outputs.S3BucketLogs
  S3BucketRoot:
    Description: Website bucket
    Value:
      Fn::GetAtt:
      - CustomResourceStack
      - Outputs.S3BucketRoot
  S3BucketLogsName:
    Description: Logging bucket name
    Value:
      Fn::GetAtt:
      - CustomResourceStack
      - Outputs.S3BucketLogsName
  S3BucketRootName:
    Description: Website bucket name
    Value:
      Fn::GetAtt:
      - CustomResourceStack
      - Outputs.S3BucketRootName
  CertificateArn:
    Description: Issued certificate
    Value:
      Fn::GetAtt:
      - AcmCertificateStack
      - Outputs.CertificateArn
  CFDistributionName:
    Description: CloudFront distribution
    Value:
      Fn::GetAtt:
      - CloudFrontStack
      - Outputs.CloudFrontDistribution
  LambdaEdgeFunctionVersion:
    Description: Security Lambda version
    Value:
      Fn::GetAtt:
      - CloudFrontStack
      - Outputs.LambdaEdgeFunctionVersion
  CloudFrontDomainName:
    Description: Website address
    Value:
      Fn::GetAtt:
      - CloudFrontStack
      - Outputs.CloudFrontDomainName
